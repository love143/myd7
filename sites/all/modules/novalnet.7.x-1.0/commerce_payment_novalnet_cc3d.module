<?php
/**
 * @file
 * Provides an novalnet_cc payment method for Drupal Commerce for testing and
 *   development.
 */
/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payment_novalnet_cc3d_menu() {

$items = array();

$items['cc3d/review'] = array
  (
    'title'         => 'Review payment',
    'page callback'     => 'commerce_novalnet_cc3d_payment_complete',
    'access arguments'  => array('access content'),
    'type'      => MENU_CALLBACK,
  );

return $items;
}

function commerce_novalnet_cc3d_payment_complete()
{
$_response = $_POST;
$checkstatus = commerce_payment_novalnet_cc3d_check_status($_response);
if($checkstatus != 1)
{
  $url = 'checkout/'.$_response['orderid'].'/review';
 drupal_set_message(check_plain($checkstatus), 'error');
 drupal_goto($url);
}
else
{
commerce_payment_novalnet_cc3d_transaction($_response);

drupal_goto('checkout/'.$_response['orderid'].'/complete');

}

}

function commerce_payment_novalnet_cc3d_commerce_payment_method_info() {
  $payment_methods = array();
  $path = base_path() . drupal_get_path('module', 'commerce_payment');
  $payment_methods['commerce_payment_novalnet_cc3d'] = array(
    'title' => t('Novalnet Credit Card 3D Secure'),
    'display_title' => ' '.t('Credit Card 3D Secure'),
    'description' => t('Payment Using Novalnet Credit Card 3D Secure'),
    'active' => TRUE,
  );

  return $payment_methods;
}


function commerce_payment_novalnet_cc3d_settings_form($settings=NULL)
{
    $form = array();

    $form['nn_title'] = array(
    '#title'=> t('Novalnet Payment Settings'),
    );

     $form['nn_cc3d_test_mode'] = array(
    '#type' => 'select',
    //'#description'=> t('Enter The Transaction Mode'),
    '#title' => t('Enable Test Mode'),
    '#default_value'=>empty($settings['nn_cc3d_test_mode']) ? '' : $settings['nn_cc3d_test_mode'],
    '#options'=>array(
    '1'=>t('YES'),
    '0'=>t('NO')),
    '#required' => FALSE,
    );

    $form['nn_cc3d_vendor_id'] = array(
    '#type' => 'textfield',
    '#description'=>t('Enter your Novalnet Merchant ID'),
    '#title' => t('Novalnet Merchant ID'),
    '#default_value'=>empty($settings['nn_cc3d_vendor_id']) ? '' : $settings['nn_cc3d_vendor_id'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_authorisation_code'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter your Novalnet Merchant Authorisation code'),
    '#title' => t('Novalnet Merchant Authorisation code'),
    '#default_value'=>empty($settings['nn_cc3d_authorisation_code']) ? '' : $settings['nn_cc3d_authorisation_code'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter your Novalnet Product ID'),
    '#title' => t('Novalnet Product ID'),
    '#default_value'=>empty($settings['nn_cc3d_product_id']) ? '' : $settings['nn_cc3d_product_id'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('Enter your Novalnet Tariff ID'),
    '#title' => t('Novalnet Tariff ID'),
    '#default_value'=>empty($settings['nn_cc3d_tariff_id']) ? '' : $settings['nn_cc3d_tariff_id'],
    '#required' => TRUE,
    );

    $form['nn_cc3d_manuall_booking_limit'] = array(
    '#type' => 'textfield',
    '#description'=> t('Please enter the amount in cents'),
    '#title' => t('Manual checking amount in cents'),
    '#default_value'=>empty($settings['nn_cc3d_manuall_booking_limit']) ? '' : $settings['nn_cc3d_manuall_booking_limit'],
    '#required' => FALSE,
    );

    $form['nn_cc3d_second_product_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('for the manual checking'),
    '#title' => t('Second Product ID in Novalnet'),
    '#default_value'=>empty($settings['nn_cc3d_second_product_id']) ? '' : $settings['nn_cc3d_second_product_id'],
    '#required' => FALSE,
    );

    $form['nn_cc3d_second_tariff_id'] = array(
    '#type' => 'textfield',
    '#description'=> t('for the manual checking'),
    '#title' => t('Second Tariff ID in Novalnet'),
    '#default_value'=>empty($settings['nn_cc3d_second_tariff_id']) ? '' : $settings['nn_cc3d_second_tariff_id'],
    '#required' => FALSE,
    );

    $form['nn_cc3d_customer_information'] = array(
    '#type' => 'textfield',
    '#description'=> t('will appear in the payment form'),
    '#title' => t('Information to the end customer'),
    '#default_value'=>empty($settings['nn_cc3d_customer_information']) ? '' : $settings['nn_cc3d_customer_information'],
    '#required' => FALSE,
    );

    $form['nn_cc3d_proxy_server'] = array(
    '#type' => 'textfield',
    '#description'=> t('If you use a Proxy Server, enter the Proxy Server IP with port here (e.g. www.proxy.de:80)'),
    '#title' => t('Proxy-Server'),
    '#default_value'=>empty($settings['nn_cc3d_proxy_server']) ? '' : $settings['nn_cc3d_proxy_server'],
    '#required' => FALSE,
    );
    return $form;
}
function commerce_payment_novalnet_cc3d_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form = array();
  $yr=range(date('Y'),date('Y')+10);

  // Merge in values from the order.
  if (!empty($order->data['commerce_payment_novalnet_cc3d'])) {
    $pane_values += $order->data['commerce_payment_novalnet_cc3d'];
  }

  // Merge in default values.
  $pane_values += array(
    'nn_cc3d_name' => '',
  );

  $form['nn_cc3d_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit card holder') . ' <span class="form-required" title="This field is required.">*</span>',
    '#attributes' => array('autocomplete' => 'off'),
  );

  $form['nn_cc3d_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number') . ' <span class="form-required" title="This field is required.">*</span>',
    '#attributes' => array('autocomplete' => 'off'),
  );

  $form['nn_cc3d_exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Month') . ' <span class="form-required" title="This field is required.">*</span>',
    '#options' => drupal_map_assoc(array('01','02','03','04','05','06','07','08','09','10','11','12')),
  );

 $form['nn_cc3d_exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Year') . ' <span class="form-required" title="This field is required.">*</span>',
    '#options' => drupal_map_assoc($yr),
  );

  $form['nn_cc3d_cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC (Verification Code)') . ' <span class="form-required" title="This field is required.">*</span>',
    '#maxlength' => '4',
    '#attributes' => array('autocomplete' => 'off'),
  );
  $form['nn_cc3d_desc'] = array(
        '#markup' => '<div>' . t('The amount will be booked immediately from your credit card when you submit the order.') . '</div>',
  );
  if (isset($payment_method['settings']['nn_cc3d_customer_information']) && trim($payment_method['settings']['nn_cc3d_customer_information']) != '') {
        $form['nn_cc3d_customer_information'] = array(
            '#markup' => '<div>' . $payment_method['settings']['nn_cc3d_customer_information'] . '</div>',
        );
    }

  return $form;
}

function commerce_payment_novalnet_cc3d_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

   if(strlen(trim($pane_values['nn_cc3d_name'])) < 3 || preg_match('/[#%\^<>@$=*!]/', $pane_values['nn_cc3d_name'])) {
     form_set_error(implode('][', array_merge($form_parents, array('nn_cc3d_name'))), t('Please enter valid credit card details!'));
     return FALSE;
   }
    $pane_values['nn_cc3d_no'] = commerce_payment_novalnet_cc3d_sanitizeCcNumber(trim($pane_values['nn_cc3d_no']));
     $pane_values['nn_cc3d_cvv'] = commerce_payment_novalnet_cc3d_sanitizeCcNumber(trim($pane_values['nn_cc3d_cvv']));
   if(!commerce_payment_novalnet_cc3d_validateCcData($pane_values))
   {
     form_set_error(implode('][', array_merge($form_parents, array('nn_cc3d_no','nn_cc3d_exp_year','nn_cc3d_exp_month','nn_cc3d_cvv'))), t('Please enter valid credit card details!'));

     return FALSE;
   }

}

function commerce_payment_novalnet_cc3d_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
$nn_callback = 'cc3d/review';
    $order->data['commerce_payment_novalnet_cc3d'] = $pane_values;
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    $name_parts = explode(' ', trim($billing_address['name_line']));
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);

    commerce_payment_novalnet_cc3d_basic_parm_list($data,$order,$payment_method);
    if (empty($data)) {
        drupal_set_message(check_plain(t('Basic Parameter Missing')), 'error');
        return FALSE;
    }
    if (isset($payment_method['settings']['nn_cc3d_manuall_booking_limit']) && trim($payment_method['settings']['nn_cc3d_manuall_booking_limit']) != '') {
        $manual_limit = trim($payment_method['settings']['nn_cc3d_manuall_booking_limit']);
        if ((isset($payment_method['settings']['nn_cc3d_second_product_id']) && trim($payment_method['settings']['nn_cc3d_second_product_id']) != '') && (isset($payment_method['settings']['nn_cc3d_second_product_id']) && trim($payment_method['settings']['nn_cc3d_second_product_id']) != '')) {
            if ($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] >= $manual_limit) {
                $data['product'] = trim($payment_method['settings']['nn_cc3d_second_product_id']);
                $data['tariff'] = trim($payment_method['settings']['nn_cc3d_second_tariff_id']);
            }
        }
        else{
            drupal_set_message(t('Product-ID2 and/or Tariff-ID2 missing!'), 'error');
            return FALSE;
        }
    }
    commerce_payment_novalnet_cc3d_default_param_list($data,$order,$billing_address, $charge);
    commerce_payment_novalnet_cc3d_user_data($data,$order);
    //commerce_payment_novalnet_cc3d_orderamount($data,$order);
    commerce_payment_novalnet_cc3d_orderamount($data, $charge);
    commerce_payment_novalnet_cc3d_returnurl($data,$nn_callback);
    $data['key'] = '6';
    $data['order_no'] = $order->order_number;
    $data['orderid'] = $order->order_number;
    $data['instance_id'] = $payment_method['instance_id'];

    foreach ($data as $value) {
        if ($value === '') {
            if ($data['customer_no'] == '') {
                // Logged in user
            }
            else {
                // Not logged in
                drupal_set_message(check_plain(t('Input Data Missing')), 'error');
                return FALSE;
            }
        }
    }

    $host = 'https://payport.novalnet.de/global_pci_payport';
    $output = novalnet_cc3d_redirect_form($data,$host);
    echo $output; exit;
}
function novalnet_cc3d_redirect_form($data,$host)
 {
   $nn_form = '<form name=nn_redirect_form action="'.$host.'" method=post>';
   foreach($data as $name=>$value)
   {
    $nn_form .= '<input type = hidden name = "'.$name.'" value = "'.$value.'">';
   }
   $nn_form .= t('You will be redirected to Novalnet AG in a few seconds.').'<br><input type=submit name = redirecting value = ' . t('Redirecting....') . '></form>';
   $nn_form .= '<script>document.nn_redirect_form.submit();</script>';

    return $nn_form;
}
/*function commerce_payment_novalnet_cc3d_orderamount(&$data,$order)
{
$data['amount'] = $order->commerce_order_total['und'][0]['amount'];
}*/
function commerce_payment_novalnet_cc3d_orderamount(&$data, $charge) {
    $data['amount'] = $charge['amount'];
}
function commerce_payment_novalnet_cc3d_default_param_list(&$data, $order, $billing_address, $charge)
{
    global $language;

    $customer_no = ($order->uid) > 0 ? $order->uid : 'gast';
    $data['currency']         = $charge['currency_code'];
    $data['firstname']       = trim($billing_address['first_name']);
    $data['lastname']        = trim($billing_address['last_name']);
    $data['gender']           = 'u';
    $data['email']            = $order->mail;
    $data['street']           = $billing_address['thoroughfare'];
    $data['search_in_street'] = '1';
    $data['city']             = $billing_address['locality'];
    $data['zip']              = $billing_address['postal_code'];
    $data['lang']             = strtoupper($language->language);
    $data['language']         = strtoupper($language->language);
    $data['session']          = session_id();
    $data['country']          = $billing_address['country'];
    $data['country_code']     = $billing_address['country'];
    $data['remote_ip']        = commerce_payment_novalnet_cc3d_getRealIpAddr();
    $data['birth_date']       = 'NULL';
    $data['fax']          = 'NULL';
    $data['tel']              = 'NUll';
    $data['order_no']         = $order->order_number;
    $data['customer_no'] = $customer_no;
    $data['use_utf8'] = '1';

    if ($data['lastname'] == '') {
        $data['lastname'] = $data['firstname'];
    }
}
function commerce_payment_novalnet_cc3d_basic_parm_list(&$data,$order,$payment_method)
{
    if (isset($payment_method['settings']['nn_cc3d_vendor_id']) && trim($payment_method['settings']['nn_cc3d_vendor_id']) != '') {
        $data['vendor'] = trim($payment_method['settings']['nn_cc3d_vendor_id']);
    }
    if (isset($payment_method['settings']['nn_cc3d_product_id']) && trim($payment_method['settings']['nn_cc3d_product_id']) != '') {
        $data['product'] = trim($payment_method['settings']['nn_cc3d_product_id']);
    }
    if (isset($payment_method['settings']['nn_cc3d_authorisation_code']) && trim($payment_method['settings']['nn_cc3d_authorisation_code']) != '') {
        $data['auth_code'] = trim($payment_method['settings']['nn_cc3d_authorisation_code']);
    }
    if (isset($payment_method['settings']['nn_cc3d_tariff_id']) && trim($payment_method['settings']['nn_cc3d_tariff_id']) != '') {
        $data['tariff'] = trim($payment_method['settings']['nn_cc3d_tariff_id']);
    }
    if (isset($payment_method['settings']['nn_cc3d_test_mode']) && trim($payment_method['settings']['nn_cc3d_test_mode']) != '') {
        $data['test_mode'] = trim($payment_method['settings']['nn_cc3d_test_mode'] == 'yes') ? 1 : 0;
    }
    if (isset($payment_method['settings']['nn_cc3d_manuall_booking_limit']) && trim($payment_method['settings']['nn_cc3d_manuall_booking_limit']) != '') {
        $manual_limit = trim($payment_method['settings']['nn_cc3d_manuall_booking_limit']);
        if ($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] >= $manual_limit) {
            $data['product'] = trim($payment_method['settings']['nn_cc3d_second_product_id']);
            $data['tariff'] = trim($payment_method['settings']['nn_cc3d_second_tariff_id']);
        }
    }



   /* $data['vendor'] = $payment_method['settings']['nn_cc3d_vendor_id'];
    $data['product'] = $payment_method['settings']['nn_cc3d_product_id'];
    $data['auth_code'] = $payment_method['settings']['nn_cc3d_authorisation_code'];
    $data['tariff'] = $payment_method['settings']['nn_cc3d_tariff_id'];
    if($payment_method['settings']['nn_cc3d_manuall_booking_limit'] != '')
    {
      if($order->commerce_order_total['und'][0]['amount'] > $payment_method['settings']['nn_cc3d_manuall_booking_limit'])
      {
    $data['product'] = $payment_method['settings']['nn_cc3d_second_product_id'];
    $data['tariff'] = $payment_method['settings']['nn_cc3d_second_tariff_id'];
      }
    }
    $data['test_mode'] = $payment_method['settings']['nn_cc3d_test_mode'];*/

}
function commerce_payment_novalnet_cc3d_user_data(&$data,$order)
{
    $data['cc_holder'] = rtrim(trim($order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_name']), "&");
    $data['cc_no'] = trim($order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_no']);
    $data['cc_exp_month'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_exp_month'];
    $data['cc_exp_year'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_exp_year'];
    $data['cc_cvc2'] = trim($order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_cvv']);

/*$data['cc_holder'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_name'];
$data['cc_no'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_no'];
$data['cc_exp_month'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_exp_month'];
$data['cc_exp_year'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_exp_year'];
$data['cc_cvc2'] = $order->data['commerce_payment_novalnet_cc3d']['nn_cc3d_cvv'];*/

}
function commerce_payment_novalnet_cc3d_transaction($_response) {
if($_response['test_mode'] == 1)
{
$testorder = t('<B>Test order</B>');
}
$transaction = commerce_payment_transaction_new('commerce_payment_novalnet_cc3d',$_response['orderid']);
$transaction->instance_id = $_response['instance_id'];
$transaction->amount = $_response['amount'];
$transaction->currency_code = $_response['currency'];
$transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
$transaction->message = t('Novalnet Transaction ID').'&nbsp;:&nbsp;'. $_response['tid'].'<br>'.$testorder;
commerce_payment_transaction_save($transaction);
$order = commerce_order_load($_response['orderid']);
$order = commerce_order_status_update($order, 'checkout_complete', FALSE, TRUE, t('Customer continued to the next checkout page via a submit button.'));
commerce_checkout_complete($order);
drupal_set_message(check_plain(t('Please note down the below Transaction details provided by Novalnet (TID)')) . '<br>' . utf8_encode($transaction->message), 'status');
//drupal_goto('checkout/'.$_response['orderid'].'/complete');
}
function commerce_payment_novalnet_cc3d_isPublicIP($value)
{
  return (count(explode('.', $value)) == 4 && !preg_match('~^((0|10|172\.16|192\.168|169\.254|255|127\.0)\.)~', $value));
}

/** Function for Getting the Ip Address **/

function commerce_payment_novalnet_cc3d_getRealIpAddr()
{
      $_check = array(
          'HTTP_X_FORWARDED_FOR',
          'HTTP_CLIENT_IP',
          'HTTP_X_CLUSTER_CLIENT_IP',
          'HTTP_FORWARDED_FOR',
      );
      foreach($_check as $_key)
      {
    if(isset($_SERVER[$_key]))
    {
      $ips = explode(',', $_SERVER[$_key]);
      if(isset($ips[0]) && $this->commerce_payment_novalnet_cc3d_isPublicIP($ips[0]))
      {
        return $ips[0];
      }
    }
      }
      return $_SERVER['REMOTE_ADDR'];
}
function commerce_payment_novalnet_cc3d_validateCcData($ccData)
{
    if(commerce_payment_novalnet_cc3d_getCcType($ccData['nn_cc3d_no']) && commerce_payment_novalnet_cc3d_validateCcNumber($ccData['nn_cc3d_no']) &&
     commerce_payment_novalnet_cc3d_validateCcExpiry($ccData['nn_cc3d_exp_month'], $ccData['nn_cc3d_exp_year']) && commerce_payment_novalnet_cc3d_validateCvv($ccData['nn_cc3d_cvv']))
    {
    return true;
    }

    return false;
}
function commerce_payment_novalnet_cc3d_getCcType($ccNumber)
{
  /*if(preg_match('/^4[0-9]{12}([0-9]{3})?$/', $ccNumber)) {
      return TRUE;
  }elseif(preg_match('/^5[1-5][0-9]{14}$/', $ccNumber)) {
      return TRUE;
  }
  return false;*/
  return TRUE;
}
function commerce_payment_novalnet_cc3d_validateCcNumber($ccNumber)
{
  /*cardNumber = strrev($ccNumber);
  $numSum = 0;
  for ($i=0; $i<strlen($cardNumber); $i++) {
      $currentNum = substr($cardNumber, $i, 1);

      // Double every second digit

      if ($i % 2 == 1) {
      $currentNum *= 2;
      }

      // Add digits of 2-digit numbers together

      if ($currentNum > 9) {
      $firstNum = $currentNum % 10;
      $secondNum = ($currentNum - $firstNum) / 10;
      $currentNum = $firstNum + $secondNum;
      }
      $numSum += $currentNum;
      }
      /** If the total has no remainder it's OK */
    if (!is_numeric($ccNumber) || preg_match('/[#%\^<>@$=*!]/', $ccNumber) || strlen($ccNumber) < 12)
        return FALSE;
    return TRUE;
}
function commerce_payment_novalnet_cc3d_validateCvv($cvv)
{
  return preg_match('/^[0-9]{3,4}$/', $cvv);
}
function commerce_payment_novalnet_cc3d_validateCcExpiry($month, $year)
{

  /*$tmp = strtotime('-3 days');
  return ($month > 0 && $month < 13 && ($year == date('Y', $tmp) ? ($month >= date('n', $tmp)) : ($year > date('Y', $tmp))));*/
  if (empty($year) || empty($month)) {
        return FALSE;
    }
    if (($year == date('Y') && $month < date('m')) || ($year < date('Y'))) {
        return FALSE;
    }
    return TRUE;
}
function commerce_payment_novalnet_cc3d_sanitizeCcNumber($ccNumber)
{
  return preg_replace('/[\-\s]+/', '', $ccNumber);
}
function  commerce_payment_novalnet_cc3d_check_status($_response)
{

  if(isset($_response['status']) && $_response['status']=='100')
    {
      return TRUE;
    }

    else
    {
      $status = commerce_payment_novalnet_cc3d_payment_error($_response);
      return $status;

    }
}
function commerce_payment_novalnet_cc3d_payment_error($_response)
{
    if(isset($_response['status_text']))
    {
    $nn_status_error = html_entity_decode($_response['status_text'], ENT_QUOTES, "UTF-8");
    //$novalnet_error = utf8_encode($_response['status_text']);

    }
    elseif(isset($_response['status_desc']))
    {
    $nn_status_error = html_entity_decode($_response['status_desc'], ENT_QUOTES, "UTF-8");
    //$novalnet_error = utf8_encode($_response['status_desc']);
    }
    elseif(isset($_response['status_message']))
    {
    $nn_status_error = html_entity_decode($_response['status_message'], ENT_QUOTES, "UTF-8");
    //$novalnet_error = utf8_encode($_response['status_desc']);
    }else
    {

    $novalnet_error = t('There was an error and your payment could not be completed.'.$_response['status']);
    }

    return $novalnet_error;
}
function commerce_payment_novalnet_cc3d_returnurl(&$data,$nn_callback)
{
  $data['return_url']          = url($nn_callback, array('absolute' => TRUE));
  $data['return_method']       = 'POST';
  $data['error_return_url']    = url($nn_callback, array('absolute' => TRUE));
  $data['error_return_method'] = 'POST';
}
